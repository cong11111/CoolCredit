package com.tiny.cash.loan.card.feature.start;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;

import com.tiny.cash.loan.card.Constants;
import com.tiny.cash.loan.card.kudicredit.R;
import com.tiny.cash.loan.card.feature.main.HomeActivity;
import com.tiny.cash.loan.card.feature.main.MainActivity;
import com.tiny.cash.loan.card.base.BaseActivity;
import com.tiny.cash.loan.card.ui.dialog.fragment.AgreeTermsFragment;
import com.tiny.cash.loan.card.utils.AESUtil;
import com.tiny.cash.loan.card.utils.CommonUtils;
import com.tiny.cash.loan.card.utils.KvStorage;
import com.tiny.cash.loan.card.utils.LocalConfig;

import com.tiny.cash.loan.card.net.ResponseException;
import com.tiny.cash.loan.card.net.NetManager;
import com.tiny.cash.loan.card.net.NetObserver;
import com.tiny.cash.loan.card.net.response.data.bean.UserInfo;
import com.tiny.cash.loan.card.net.response.Response;
import com.tiny.cash.loan.card.net.server.ApiServerImpl;

import io.reactivex.Observable;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.schedulers.Schedulers;

public class StartActivity extends BaseActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        String text = "9DEC9972684FD1A96404E65A5884C354CD550AF3C0161031EFED48D7EF65BE9D1658CAB3713ABCE7F6446EABBBCDBD3ECA534B6110920018D6F4BA8A9DE87940E5EB28BF3DAA91B220C2654D0512F83CF5F446F2179E22C1D517C060CAA3964E780342B57D3925A9044EB1D5E86F000BBC1696D7E3893294BBAEC7180F75DB2CA17E7BA111BBDFC79FD31E00D1C303785C5F71876E7B18D7B7C38E5896E40462FDDD02ED310BC9591F4B06BF8666192CB3718DB3038D4D46CCAC44C21868D11E839CAD6265C3ADC77DDA90CC38FB7AD7E2EDBAAD6DB962FA98ABD5DD4A11380FCDECE5D035B2969B5E15FCB952BEA7CAD005B187E6F67A665C1A6EE6A397435820131DC24CCDFEE67D53AC5B8AD23853047D223248C6D5ADCC5A1AAB985F6521C869EFAB03603EE3B6F918BA9322851A24C305550C338AB8EC38ACB79D946EAA485B9066D43C74CE50B2A7B4FEAD77E57733D70A82C6D70E39A70D78BAD661B67B6BE31F51EBF3CED842BD8C99AECC298BD25A23D8A75B4644CEF6457A81756C6232AE2876E68CCCBB879AFD7770C566880E907D4BE8BE211E791D22FDE79B646ABC3C13DE3786EBA3D8DD3BA7986F313418AD9E401BEFACD35050AA39350D0352816741A8F07C85047F21E74D8C58E0FD19B93F679E60F4BF40DC732D41F543FCBEEDD3F57BF244C592D67578330C05AD26EF0F7D60DE4CDF55EA152847EE51EFD5C0DAA2E83454EF68988762D80DB59C3B0255614419F0BA83FA5A989FFA59E585D209EDE09998F66BF3D3676FC097CEEFB6E6FE5793A81A0001C25224606B305F2C119AE86C69EE4BA0169475970308E554B2CAE2479CB660FFA16FAB1087DC02A196C9E673D7ABD1D156FE8F09C1BCF8019D2107FF216BED074E9EEC82202567FCAC05F6C5E0B81D42884E4DB3ACB3DD446C030D55A978EC3E6EB0A08D360838B41ABC6639CC2552C093C0C61021B3A0A95D70B788B9201EDBEE12B51B193BA937DCF72D7B87172224F39745B034078376AD7D516A83627A06721C0FAC0BFAC2036023CA821F45EE762FE3E3DB4CABA2778C3316EDAFACC73C0DE69AA4CAA4674A73374D625BBAAF1AC2B4F2BE48F44F8824B9B94C10B156285571F7C0743597EF469EF23AE43E2111FD5501916F9921FAC2987E6BE7C4135B4A97C3DD653037B1BB76C57144966A3B9A519747E22136801068F3186E40A9D5D43C6DE829B2C4FA33D7789FCE8C705E19D38C26B909885EE0F33340CC2C68332CC6EB052FB205D23D3AF3479E03A6246330BB755375A3A2E653A9BAB3B85EA005916845647D35531CE081E5793591E5B6EDAA8B29F05CF9768EC54C4080E05659476DF8A22939429100752C1B572DE185D3B07CC4D51C93506A5367A1D46598A8F6870AD45A42CDE153D2B1DEC08455CCB492B5910719AA7A8E330FDC8AE8F0AD10153C6F7873BE9B91A4EB249B1D7BD8083E14425AA3EE407EBDFB732952F1FEFC9BEEB708EA56C0E32C4D5F83E631A90BA46044D1F72F8759B951A911E996F6D5D849D3135161A16C959EB99A3F7F55E20C5303F2FC03275ADE64B5A2DB77268BB5F3C5EDED9F7ADD1F54D2ACEF5E2791EDC3A4A47739B8C4B33FD0945FAEAD1BB48003AADEF2C0C93BF989F120ADD4D8F784FBD97C3ADDFE6A2492E5E7B7EDE829AF9665C67470A89DFC4FC26747D8014C5FD80075F4B594F5E24AB6E3352B94D6DC896D6537900C5C7A310B593F8EB9E2D995E7DB395C0C5D73EFC93DF7DF04DD4E43D7537B6BD168D9C113DE0FEA897D3FD8C1E83E957412CCB3BEB2ADC59D4CA98129C490A3C6E5C908FE16DE56D0E9B2A068F9234A10961EF9E5198C468D977124FAC15AD638CDFAD0F3FB42F9CB07E88AA137E88C5D5103D714264BEC3538DEE3E43CC921A957505371CDA3C6B574309C3A9EA0303B5C22BBD1BD8F849FBD136C9B9490C41B7DC90CCC846D392DCB63A6F4351761378F99A41483076C6E81B9C00A82FF9CBD0E3344B17C865F27F2519A5BDA936D448D9585577CD013CED50152A78455F77564CA4331C1A1857E1B6ED82AB30389A697D5626B3268ADBD84BB3EF66C705FDBE7DE159CA7AB883F2AD81DE1149C19DCF767FC62DB632FA4A1075549E6C849667367ED3BC23CBCC57BCEF9C7183E46D3B6165054B4C958C18BD210DD05CCF8C14DFA6EF1AF2A245E0623408DFDF96E899FB12AC140A31A002D1581E0F31150ED703ADDC32ADCCA7F66E64E1F0C4C16B38EE64D0E840D5C95291CFEE69BD620722ED08B9FE69462EED9EAF34B9D1096987C2D442AF6F6C4589B8C623717D58C9168BC82759715964D699EFA0717AFB45FBC97835A58A22F06D78A34DB5A0AC98866C5C92D313131DB8FF94151699C9E9DA8BE1BCAA69EB4A4D2B4211F00ADB59F3921867964E386D78DBCBAC084600DECBA9088BC0CD0D7B635634FC778FFEA5A0AE7BAAF8A53DA23E0D1C4C5930D0172D415896D66E5E9F7B2F0D173D47496358EB2DFDD9F4DF2A7102866261D767597215A07F3903B119F1E4E8F4FECA33E4CAEC25A5D975457B4FC4858E3FEC91C71C71A0CDA21AEA078779D199737AD0451EF935A50AEBCB7F04178F0B1874C9311963A1E6A888D5D88BFF16B92F27DA23E59D3A705B0EDCEC02938473C5A091D4CEE3DEAEBB32AAB2CBE7BAA838C32DD71CB1D4549292E0D466CE0FEF6CFF1049337CE4DAD7F3772E019C17B512F35D68D6454AA49CA3BBDC651700FACD908EBC1E3615B1DF25CB157AFEB733D7DCBCDBA2679A9D51FF0F8DE492E3296F5425E9DEF3D9113CA1046361BBFA3C7DC3B8BDA494E56F21D384A5E6FFC66F18DCB9ABE477F405D589A46FD46C70BCD550AF3C0161031EFED48D7EF65BE9D1658CAB3713ABCE7F6446EABBBCDBD3ECA534B6110920018D6F4BA8A9DE87940E5EB28BF3DAA91B220C2654D0512F83CF5F446F2179E22C1D517C060CAA3964EE80A7326F532D11D1B7475F32620E621BC1696D7E3893294BBAEC7180F75DB2CA17E7BA111BBDFC79FD31E00D1C303785C5F71876E7B18D7B7C38E5896E40462FDDD02ED310BC9591F4B06BF8666192CB3718DB3038D4D46CCAC44C21868D11E839CAD6265C3ADC77DDA90CC38FB7AD7E2EDBAAD6DB962FA98ABD5DD4A11380F59B82B84E40A5067940BA9C033341129D005B187E6F67A665C1A6EE6A397435820131DC24CCDFEE67D53AC5B8AD23853047D223248C6D5ADCC5A1AAB985F6521C869EFAB03603EE3B6F918BA9322851A24C305550C338AB8EC38ACB79D946EAA485B9066D43C74CE50B2A7B4FEAD77E57733D70A82C6D70E39A70D78BAD661B62C1695F9ED0E4FA512DC6B71B2168D598BD25A23D8A75B4644CEF6457A81756C6232AE2876E68CCCBB879AFD7770C566880E907D4BE8BE211E791D22FDE79B646ABC3C13DE3786EBA3D8DD3BA7986F313418AD9E401BEFACD35050AA39350D0352816741A8F07C85047F21E74D8C58E0042832F2893947922C230946665EBBEA83BC11DFDDA37EB2847E5B2F7C7BC9C3AD26EF0F7D60DE4CDF55EA152847EE51EFD5C0DAA2E83454EF68988762D80DB59C3B0255614419F0BA83FA5A989FFA59E585D209EDE09998F66BF3D3676FC097CEEFB6E6FE5793A81A0001C25224606B305F2C119AE86C69EE4BA016947597031DBF13FAA5915A033A3B13EE23049508AE3A5111D26393F96A63B3505F0DE20FBCF8019D2107FF216BED074E9EEC82202567FCAC05F6C5E0B81D42884E4DB3ACB3DD446C030D55A978EC3E6EB0A08D360838B41ABC6639CC2552C093C0C61021B3A0A95D70B788B9201EDBEE12B51B193BA937DCF72D7B87172224F39745B0349B404009AF7E32464D57348A4BD2F0A270FCB10DBFF889B199B9ED905CAEBC08ABA2778C3316EDAFACC73C0DE69AA4CAA4674A73374D625BBAAF1AC2B4F2BE48F44F8824B9B94C10B156285571F7C0743597EF469EF23AE43E2111FD5501916F9921FAC2987E6BE7C4135B4A97C3DD653037B1BB76C57144966A3B9A519747E25C031119148436592BA7AB5A6D678FE1B2C4FA33D7789FCE8C705E19D38C26B909885EE0F33340CC2C68332CC6EB052FB205D23D3AF3479E03A6246330BB755375A3A2E653A9BAB3B85EA005916845647D35531CE081E5793591E5B6EDAA8B29F05CF9768EC54C4080E05659476DF8A22939429100752C1B572DE185D3B07CC45AB551747D8CBE6CD48034E9EEA0DE675A42CDE153D2B1DEC08455CCB492B5910719AA7A8E330FDC8AE8F0AD10153C6F7873BE9B91A4EB249B1D7BD8083E14425AA3EE407EBDFB732952F1FEFC9BEEB708EA56C0E32C4D5F83E631A90BA46044D1F72F8759B951A911E996F6D5D849D33C7968FB4B8DC96BB60FC7D5B46C2C5A38559F6C98A60E579C96DDBA3D7508D8EDED9F7ADD1F54D2ACEF5E2791EDC3A4A47739B8C4B33FD0945FAEAD1BB48003AADEF2C0C93BF989F120ADD4D8F784FBD97C3ADDFE6A2492E5E7B7EDE829AF9665C67470A89DFC4FC26747D8014C5FD80075F4B594F5E24AB6E3352B94D6DC89671854349A9A87F84E3817E51338B7E65BE155823C16E762EEDEF9A0EF35E673D7537B6BD168D9C113DE0FEA897D3FD8C1E83E957412CCB3BEB2ADC59D4CA98129C490A3C6E5C908FE16DE56D0E9B2A068F9234A10961EF9E5198C468D977124FAC15AD638CDFAD0F3FB42F9CB07E88AA137E88C5D5103D714264BEC3538DEE308834011D78761BFA3FC2C9B1B9B26145CF12EB15EACC05B49F718D544ECC8589B9490C41B7DC90CCC846D392DCB63A6F4351761378F99A41483076C6E81B9C00A82FF9CBD0E3344B17C865F27F2519A5BDA936D448D9585577CD013CED50152A78455F77564CA4331C1A1857E1B6ED82AB30389A697D5626B3268ADBD84BB3E73527CC12A8860CE30E252883FA549EDE1149C19DCF767FC62DB632FA4A1075549E6C849667367ED3BC23CBCC57BCEF9C7183E46D3B6165054B4C958C18BD210DD05CCF8C14DFA6EF1AF2A245E0623408DFDF96E899FB12AC140A31A002D1581E0F31150ED703ADDC32ADCCA7F66E64E1F0C4C16B38EE64D0E840D5C95291CFE47744E9CE051E43FB751B04B80B5679B059677B337D083A9FF507CE42BE500A3";
        Log.d("StartActivity", "des: " + AESUtil.decryptAES(text));

        Boolean islogin = KvStorage.get(LocalConfig.LC_ISLOGIN, false);
        Boolean isAgreement = KvStorage.get(LocalConfig.LC_ISAGREEMENT, false);
        if (!isAgreement){
            AgreeTermsFragment.createBuilder(this, getSupportFragmentManager())
                    .setMessage(Constants.ONE)
                    .setPositiveListener(()->{
                        finish();
                    })
                    .setNegativeListener(()->{
                        KvStorage.put(LocalConfig.LC_ISAGREEMENT, true);
                        if (islogin) {
                            login();
                        } else {
                            startIntent(HomeActivity.class);
                            finish();
                        }
                    })
                    .show();
        }else {
            if (islogin) {
                login();
            } else {
                startIntent(HomeActivity.class);
                finish();
            }
        }
    }
    private NetObserver loginObserver;
    private void login() {
        String phone = KvStorage.get(LocalConfig.LC_MOBILE,"");
        String passWord =KvStorage.get(LocalConfig.LC_PASSWORD, "");
        Observable observable =
                NetManager.getApiService().login(phone, passWord,"").subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());
        CommonUtils.disposable(loginObserver);
        showProgressDialogFragment(getString(R.string.str_loading),false);
        loginObserver = new NetObserver<Response<UserInfo>>() {
            @Override
            public void onNext(Response<UserInfo> response) {
                dismissProgressDialogFragment();
                if (response.getStatus().getCode() == ApiServerImpl.PHONE_OTHER) {
                    KvStorage.put(LocalConfig.LC_ISLOGIN, false);
                    startIntent(HomeActivity.class);
                    finish();
                }


                if (response.isSuccess()) {

                    KvStorage.put(LocalConfig.LC_ISLOGIN, true);
                    KvStorage.put(LocalConfig.LC_TOKEN,
                            response.getBody().getToken());
                    KvStorage.put(LocalConfig.LC_ACCOUNTID,
                            response.getBody().getAccountId());
                    Boolean mShowPermission = KvStorage.get(LocalConfig.getNewKey(LocalConfig.LC_HASSHOWPERMISSION), false);
                    Intent intent;
                    if (mShowPermission){
                        intent = new Intent(StartActivity.this, MainActivity.class);
                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
                    }else {
                        intent = new Intent(StartActivity.this, PermissionActivity.class);
                    }
                    startActivity(intent);
                    finish();
                } else {
                    if (response.getStatus().getCode() == ApiServerImpl.PHONE_HASNOT_REG ){
                        Intent intent1 = new Intent(StartActivity.this,HomeActivity.class);
                        startActivity(intent1);
                        finish();
                    }
                    String msg = response.getStatus().getMsg();
                    if (!TextUtils.isEmpty(msg)) {
                        showToast(msg);
                    } else {
                        showToast("Error");
                    }
                }
            }

            @Override
            public void onException(ResponseException netException) {
                dismissProgressDialogFragment();
            }

        };
        observable.subscribeWith(loginObserver);
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        dismissProgressDialogFragment();
        CommonUtils.disposable(loginObserver);
    }
}